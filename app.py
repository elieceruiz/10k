import streamlit as st
from datetime import datetime
import base64
import openai
from pymongo import MongoClient
import pytz

# === CONFIGURACI√ìN GENERAL ===
st.set_page_config(page_title="üß† orden-ador", layout="centered")
tz = pytz.timezone("America/Bogota")

# Claves de acceso desde .streamlit/secrets.toml
openai.api_key = st.secrets["openai_api_key"]
client = MongoClient(st.secrets["mongo_uri"])
db = client["ordenador"]
historial_col = db["historial"]

# === ESTADO BASE ===
for key, val in {
    "orden_detectados": [],
    "orden_seleccionados": [],
    "orden_confirmado": False,
    "orden_en_ejecucion": None,
    "orden_timer_start": None
}.items():
    if key not in st.session_state:
        st.session_state[key] = val

# === FUNCI√ìN OPENAI VISUAL ===
def detectar_objetos_con_openai(imagen_bytes):
    base64_image = base64.b64encode(imagen_bytes).decode("utf-8")
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "¬øQu√© objetos ves en esta imagen? Solo da una lista simple."},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                ],
            }
        ],
        max_tokens=100
    )
    texto = response.choices[0].message.content
    objetos = [x.strip(" -‚Ä¢0123456789. ") for x in texto.split("\n") if x.strip()]
    return objetos

# === INTERFAZ PRINCIPAL ===
seccion = st.selectbox("¬øD√≥nde est√°s trabajando?", ["‚è± Desarrollo", "üì∏ Ordenador", "üìÇ Historial"])

# === OPCI√ìN 1: Desarrollo (vac√≠o) ===
if seccion == "‚è± Desarrollo":
    st.subheader("‚è± M√≥dulo de desarrollo")
    st.info("Esta secci√≥n a√∫n no est√° implementada.")

# === OPCI√ìN 2: ORDENADOR VISUAL CON OPENAI ===
elif seccion == "üì∏ Ordenador":
    st.subheader("üì∏ An√°lisis de entorno con visi√≥n GPT-4o")

    imagen = st.file_uploader("Sub√≠ una imagen del entorno", type=["jpg", "jpeg", "png"])

    # 1. Detectar objetos si a√∫n no hay
    if imagen and not st.session_state.orden_detectados and not st.session_state.orden_confirmado:
        with st.spinner("Detectando objetos..."):
            detectados = detectar_objetos_con_openai(imagen.read())
            st.session_state.orden_detectados = detectados
            st.success("Objetos detectados: " + ", ".join(detectados))
            st.rerun()

    # 2. Selecci√≥n del orden
    if st.session_state.orden_detectados and not st.session_state.orden_confirmado and not st.session_state.orden_en_ejecucion:
        seleccionados = st.multiselect(
            "Seleccion√° los elementos a organizar, en el orden deseado:",
            options=st.session_state.orden_detectados,
            default=st.session_state.get("orden_seleccionados", []),
            key="multiselect_orden"
        )
        st.session_state.orden_seleccionados = seleccionados

        if seleccionados and st.button("‚úÖ Confirmar orden"):
            st.session_state.orden_confirmado = True
            st.success("Orden confirmado. Enfocando ejecuci√≥n...")
            st.rerun()

    # 3. Ejecuci√≥n centrada
    if st.session_state.orden_confirmado:

        # Si hay √≠tem en ejecuci√≥n
        if st.session_state.orden_en_ejecucion:
            st.success(f"üü¢ Ejecutando: **{st.session_state.orden_en_ejecucion}**")
            tiempo = datetime.now(tz) - st.session_state.orden_timer_start
            st.markdown(f"‚è± Tiempo transcurrido: `{str(tiempo).split('.')[0]}`")

            if st.button("‚úÖ Finalizar este √≠tem"):
                historial_col.insert_one({
                    "√≠tem": st.session_state.orden_en_ejecucion,
                    "duraci√≥n": str(tiempo).split(".")[0],
                    "timestamp": datetime.now(tz),
                })

                if st.session_state.orden_seleccionados:
                    siguiente = st.session_state.orden_seleccionados.pop(0)
                    st.session_state.orden_en_ejecucion = siguiente
                    st.session_state.orden_timer_start = datetime.now(tz)
                else:
                    st.session_state.orden_en_ejecucion = None
                    st.session_state.orden_timer_start = None
                    st.success("‚úÖ Todos los √≠tems han sido ejecutados.")
                    st.session_state.orden_confirmado = False
                    st.session_state.orden_detectados = []
                    st.session_state.orden_seleccionados = []
                st.rerun()

        # Si a√∫n no ha comenzado la ejecuci√≥n
        elif st.session_state.orden_seleccionados:
            st.info("üìù Orden confirmado. Listo para iniciar.")
            st.markdown("**Orden establecido:**")
            for i, item in enumerate(st.session_state.orden_seleccionados, 1):
                st.markdown(f"{i}. {item}")
            if st.button("üöÄ Iniciar ejecuci√≥n"):
                st.session_state.orden_en_ejecucion = st.session_state.orden_seleccionados.pop(0)
                st.session_state.orden_timer_start = datetime.now(tz)
                st.rerun()

        # Si ya termin√≥ todo
        else:
            st.success("‚úÖ Todos los √≠tems ejecutados.")

# === OPCI√ìN 3: HISTORIAL (vac√≠o) ===
elif seccion == "üìÇ Historial":
    st.subheader("üìÇ Historial de ejecuci√≥n")
    docs = list(historial_col.find({}).sort("timestamp", -1))
    if docs:
        for d in docs:
            st.markdown(f"**{d['√≠tem']}** ‚Äî {d['duraci√≥n']} ‚è±")
            st.caption(d["timestamp"].astimezone(tz).strftime("%Y-%m-%d %H:%M:%S"))
            st.markdown("---")
    else:
        st.info("A√∫n no hay registros.")